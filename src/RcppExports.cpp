// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace Eigen;

// powerMethodCpp
VectorXd powerMethodCpp(MatrixXd X, VectorXd v, double eps, int maxiter);
RcppExport SEXP _locStra_powerMethodCpp(SEXP XSEXP, SEXP vSEXP, SEXP epsSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(powerMethodCpp(X, v, eps, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// covCpp
MatrixXd covCpp(MatrixXd X);
RcppExport SEXP _locStra_covCpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(covCpp(X));
    return rcpp_result_gen;
END_RCPP
}
// jaccardMatrixCpp2
MatrixXd jaccardMatrixCpp2(MatrixXd X);
RcppExport SEXP _locStra_jaccardMatrixCpp2(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardMatrixCpp2(X));
    return rcpp_result_gen;
END_RCPP
}
// calculateSMatrixDenseCpp
MatrixXd calculateSMatrixDenseCpp(MatrixXd X, bool Djac, bool phased, int minVariants);
RcppExport SEXP _locStra_calculateSMatrixDenseCpp(SEXP XSEXP, SEXP DjacSEXP, SEXP phasedSEXP, SEXP minVariantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type Djac(DjacSEXP);
    Rcpp::traits::input_parameter< bool >::type phased(phasedSEXP);
    Rcpp::traits::input_parameter< int >::type minVariants(minVariantsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateSMatrixDenseCpp(X, Djac, phased, minVariants));
    return rcpp_result_gen;
END_RCPP
}
// grmDenseCpp3
MatrixXd grmDenseCpp3(MatrixXd X, bool robust);
RcppExport SEXP _locStra_grmDenseCpp3(SEXP XSEXP, SEXP robustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    rcpp_result_gen = Rcpp::wrap(grmDenseCpp3(X, robust));
    return rcpp_result_gen;
END_RCPP
}
// covCpp_sparse
MatrixXd covCpp_sparse(MatrixXi T, int nrows, int ncols, int rowStart, int rowEnd);
RcppExport SEXP _locStra_covCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP rowStartSEXP, SEXP rowEndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< int >::type rowStart(rowStartSEXP);
    Rcpp::traits::input_parameter< int >::type rowEnd(rowEndSEXP);
    rcpp_result_gen = Rcpp::wrap(covCpp_sparse(T, nrows, ncols, rowStart, rowEnd));
    return rcpp_result_gen;
END_RCPP
}
// jaccardMatrixCpp4_sparse
MatrixXd jaccardMatrixCpp4_sparse(MatrixXi T, int nrows, int ncols);
RcppExport SEXP _locStra_jaccardMatrixCpp4_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardMatrixCpp4_sparse(T, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// calculateSMatrixCpp
MatrixXd calculateSMatrixCpp(MatrixXi T, int nrows, int ncols, bool Djac, bool phased, int minVariants, int rowStart, int rowEnd);
RcppExport SEXP _locStra_calculateSMatrixCpp(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP DjacSEXP, SEXP phasedSEXP, SEXP minVariantsSEXP, SEXP rowStartSEXP, SEXP rowEndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< bool >::type Djac(DjacSEXP);
    Rcpp::traits::input_parameter< bool >::type phased(phasedSEXP);
    Rcpp::traits::input_parameter< int >::type minVariants(minVariantsSEXP);
    Rcpp::traits::input_parameter< int >::type rowStart(rowStartSEXP);
    Rcpp::traits::input_parameter< int >::type rowEnd(rowEndSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateSMatrixCpp(T, nrows, ncols, Djac, phased, minVariants, rowStart, rowEnd));
    return rcpp_result_gen;
END_RCPP
}
// grmCpp_sparse
MatrixXd grmCpp_sparse(MatrixXi T, int nrows, int ncols, bool robust);
RcppExport SEXP _locStra_grmCpp_sparse(SEXP TSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP robustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatrixXi >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    rcpp_result_gen = Rcpp::wrap(grmCpp_sparse(T, nrows, ncols, robust));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_locStra_powerMethodCpp", (DL_FUNC) &_locStra_powerMethodCpp, 4},
    {"_locStra_covCpp", (DL_FUNC) &_locStra_covCpp, 1},
    {"_locStra_jaccardMatrixCpp2", (DL_FUNC) &_locStra_jaccardMatrixCpp2, 1},
    {"_locStra_calculateSMatrixDenseCpp", (DL_FUNC) &_locStra_calculateSMatrixDenseCpp, 4},
    {"_locStra_grmDenseCpp3", (DL_FUNC) &_locStra_grmDenseCpp3, 2},
    {"_locStra_covCpp_sparse", (DL_FUNC) &_locStra_covCpp_sparse, 5},
    {"_locStra_jaccardMatrixCpp4_sparse", (DL_FUNC) &_locStra_jaccardMatrixCpp4_sparse, 3},
    {"_locStra_calculateSMatrixCpp", (DL_FUNC) &_locStra_calculateSMatrixCpp, 8},
    {"_locStra_grmCpp_sparse", (DL_FUNC) &_locStra_grmCpp_sparse, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_locStra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
